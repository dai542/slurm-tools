#!/usr/bin/env python3

"""
myaccount

View account information for user

This script requires:
  - Python 3.7+ (for the subprocess.run options)
  - Slurm (any recent version should work)
  - Slurm configured with:
    - PriorityType=priority/multifactor

Notes:
  - Based on output from sacctmgr, sshare, and scontrol
"""

import argparse
import os
import re
import subprocess
import sys

# Set up arguments and options
parser = argparse.ArgumentParser(
    prog = "myaccount",
    formatter_class = argparse.RawDescriptionHelpFormatter,
    description = "View account information for user",
    epilog = """\
examples:

myaccount
myaccount ttrojan

support:

https://github.com/uschpc/slurm-tools/issues"""
)
parser.add_argument(
    "user",
    nargs = "?",
    default = os.environ["USER"],
    help = "user to query for account information (default = $USER)"
)
parser.add_argument(
    "-V",
    "--version",
    action = "store_true",
    help = "print version"
)
args = parser.parse_args()

if args.version:
    print("myaccount 1.1.0")
    sys.exit(0)

# Check if user exists
cmdid = ["id", args.user]
ident = subprocess.run(cmdid, capture_output = True, text = True)
if "no such user" in ident.stderr:
    print("Error: user does not exist")
    sys.exit(1)

# Get name of cluster
cmd = ["scontrol", "--local", "show", "config"]
proc = subprocess.run(cmd, capture_output = True, text = True)
cluster = re.search(r"ClusterName\s+=\s+(\S+)", proc.stdout).group(1)

# Get cluster accounts
fmt = "format=user%-10,account%-15,cluster%-10,defaultaccount%-15,qos%-11"
cmd = ["sacctmgr", "-n", "-s", "list", "user", args.user, fmt, "cluster=" + cluster]
proc = subprocess.run(cmd, capture_output = True, text = True)
out = proc.stdout.split("\n")[:-1]
if not re.search(cluster, proc.stdout):
    print("No cluster accounts found for " + args.user)
    sys.exit(0)
accounts = [line.split()[1] for line in out]

# Display table of cluster accounts
print("-----------------------------------------------------------------")
print("Cluster accounts                                                 ")
print("-----------------------------------------------------------------")
print("User       Account         Cluster    Default         QOS        ")
print("---------- --------------- ---------- --------------- -----------")
for line in out:
    print(line)
print("")

# Display table of cluster account limits and usage
print("-----------------------------------------------------------------")
print("Cluster account service units (SUs)                              ")
print("-----------------------------------------------------------------")
print("Account           Limit           Usage           Remaining      ")
print("----------------- --------------- --------------- ---------------")
fmt2 = "account,grptresmins,grptresraw"
cmd2 = ["sshare", "-P", "-o", fmt2, "-M", cluster]
proc2 = subprocess.run(cmd2, capture_output = True, text = True)
out2 = proc2.stdout.split("\n")
for account in accounts:
    sub = [i for i in out2 if re.search(account, i)]
    sub = sub[0].split("|")[1:3]
    res = [re.search(r"billing=([0-9]+)", i) for i in sub]
    if res[0] is not None and res[1] is not None:
        limit = res[0].group(1)
        usage = res[1].group(1)
        remaining = str(int(limit) - int(usage))
    elif res[1] is not None:
        limit = "n/a"
        usage = res[1].group(1)
        remaining = "n/a"
    else:
        limit = "n/a"
        usage = "n/a"
        remaining = "n/a"
    print(f"{account[:17]:<17}" + " " +
          f"{limit[:15]:<15}" + " " +
          f"{usage[:15]:<15}" + " " +
          f"{remaining[:15]:<15}")
print("")

# Display table of allowed cluster partitions
print("-----------------------------------------------------------------")
print("Allowed cluster partitions                                       ")
print("-----------------------------------------------------------------")
print("Partition      Allowed accounts                                  ")
print("-------------- --------------------------------------------------")
accounts2 = "|".join(accounts)
cmd3 = ["scontrol", "--local", "-o", "show", "partitions"]
proc3 = subprocess.run(cmd3, capture_output = True, text = True)
out3 = proc3.stdout.split("\n")[:-1]
sub = [i for i in out3 if re.search(accounts2 + "|AllowAccounts=ALL", i)]
partitions = [re.search(r"PartitionName=(\S+)", i).group(1) for i in sub]
allowed = [re.search(r"AllowAccounts=(\S+)", i).group(1) for i in sub]
for i, partition in enumerate(partitions):
    print(f"{partition[:14]:<14}" + " " +
          f"{allowed[i]}")
